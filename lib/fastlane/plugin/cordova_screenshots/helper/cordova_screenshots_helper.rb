require 'fastlane/plugin/cordova_screenshots/constants'

module Fastlane
  module Helper
    class CordovaScreenshotsHelper
      HELPER_PATH = File.expand_path(File.dirname(__FILE__))

      def self.copy_all_files(src_folder, project_folder)
        if src_folder && Dir.exist?(src_folder)
          dest_folder = project_folder.to_s
          UI.message("Copying all files from '#{src_folder}' to '#{dest_folder}'")
          Dir.exist?(dest_folder) || FileUtils.mkdir_p(dest_folder)
          FileUtils.cp_r(src_folder + "/.", dest_folder)
        elsif
          UI.user_error!("Copying files: '#{src_folder}' does not exist.")
        end
      end

      def self.copy_ios_sample_tests(scheme_name)
        ios_resources_path = File.expand_path("#{HELPER_PATH}/../resources/ios")
        source_folder = "#{ios_resources_path}/#{CordovaScreenshots::CORDOVA_SCREENSHOTS_DEFAULT_IOS_UNIT_TEST_NAME}"
        dest_folder = "#{CordovaScreenshots::CORDOVA_SCREENSHOTS_IOS_CONFIG_PATH}/#{scheme_name}"
        # TODO: Don't overwrite existing files
        copy_all_files(source_folder, dest_folder)
      end

      #
      # Find any existing Xcode Workspace generated by Cordova/Ionic
      #
      def self.find_default_ios_xcode_workspace
        Dir["#{CordovaScreenshots::CORDOVA_SCREENSHOTS_IOS_BUILD_PATH}/*.xcodeproj"].last || nil
      end

      def self.copy_android_sample_test(package_name)
        android_resources_path = File.expand_path("#{HELPER_PATH}/../resources/android")
        Dir.exist?(CordovaScreenshots::CORDOVA_SCREENSHOTS_ANDROID_CONFIG_PATH) || FileUtils.mkdir_p(CordovaScreenshots::CORDOVA_SCREENSHOTS_ANDROID_CONFIG_PATH)
        # TODO: Don't overwrite existing files!
        filename = "ScreengrabTest.java"
        FileUtils.cp("#{android_resources_path}/#{filename}", CordovaScreenshots::CORDOVA_SCREENSHOTS_ANDROID_CONFIG_PATH.to_s)
        replace_package_name("#{CordovaScreenshots::CORDOVA_SCREENSHOTS_ANDROID_CONFIG_PATH}/#{filename}", package_name)
      end

      # Read package name from test file
      def self.read_package_name_from_android_test()
        text = File.read("#{CordovaScreenshots::CORDOVA_SCREENSHOTS_ANDROID_CONFIG_PATH}/ScreengrabTest.java")
        # TODO: Error message if file is missing
        match = text.match(/package (.*)?;/)
        match[1]
        # TODO: Error message if package name can not be read
      end

      # copy over test file to `platforms\android\app\src\androidTest\java\...\ScreengrabTest.java` (... = io\ionic\starter)
      def self.copy_android_test(package_name_path)
        test_path = "app/platforms/android/app/src/androidTest/java/#{package_name_path}"
        Dir.exist?(test_path) || FileUtils.mkdir_p(test_path)
        # TODO: Handle missing ScreengrabTest.java file and suggest using other action
        FileUtils.cp("#{CordovaScreenshots::CORDOVA_SCREENSHOTS_ANDROID_CONFIG_PATH}/ScreengrabTest.java", test_path)
      end

      # copy over AndroidManifest.xml to `platforms\android\app\src\debug`
      def self.copy_android_manifest(package_name)
        android_resources_path = File.expand_path("#{HELPER_PATH}/../resources/android")
        dest_path = "app/platforms/android/app/src/debug"
        filename = "AndroidManifest.xml"
        Dir.exist?(dest_path) || FileUtils.mkdir_p(dest_path)
        FileUtils.cp("#{android_resources_path}/#{filename}", dest_path)
        replace_package_name("#{dest_path}/#{filename}", package_name)
      end

      # copy over AndroidManifest.xml to `platforms\android\app\src\androidTest`
      def self.copy_android_test_manifest()
        android_resources_path = File.expand_path("#{HELPER_PATH}/../resources/android")
        dest_path = "app/platforms/android/app/src/androidTest"
        filename = "AndroidManifest.xml"
        Dir.exist?(dest_path) || FileUtils.mkdir_p(dest_path)
        FileUtils.cp("#{android_resources_path}/#{filename}", dest_path)
      end

      def self.replace_package_name(file, package_name)
        data = File.read(file)
        filtered_data = data.gsub("tools.fastlane.plugin.cordova_screenshots", package_name)
        File.open(file, "w") do |f|
          f.write(filtered_data)
        end
      end
    end
  end
end
